//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImagesWcfServiceClient.ImagesWcfServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Image", Namespace="http://schemas.datacontract.org/2004/07/ImagesWcfService")]
    [System.SerializableAttribute()]
    internal partial class Image : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ImagesWcfServiceClient.ImagesWcfServiceReference.Tag[] TagsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal byte[] ImageContent {
            get {
                return this.ImageContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageContentField, value) != true)) {
                    this.ImageContentField = value;
                    this.RaisePropertyChanged("ImageContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string ImageName {
            get {
                return this.ImageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageNameField, value) != true)) {
                    this.ImageNameField = value;
                    this.RaisePropertyChanged("ImageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal ImagesWcfServiceClient.ImagesWcfServiceReference.Tag[] Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/ImagesWcfService")]
    [System.SerializableAttribute()]
    internal partial class Tag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityChangeInfo", Namespace="http://schemas.datacontract.org/2004/07/ImagesWcfService")]
    [System.SerializableAttribute()]
    internal partial class EntityChangeInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EntityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ImagesWcfServiceClient.ImagesWcfServiceReference.EntityState EntityStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ImagesWcfServiceClient.ImagesWcfServiceReference.EntityType EntityTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int EntityId {
            get {
                return this.EntityIdField;
            }
            set {
                if ((this.EntityIdField.Equals(value) != true)) {
                    this.EntityIdField = value;
                    this.RaisePropertyChanged("EntityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal ImagesWcfServiceClient.ImagesWcfServiceReference.EntityState EntityState {
            get {
                return this.EntityStateField;
            }
            set {
                if ((this.EntityStateField.Equals(value) != true)) {
                    this.EntityStateField = value;
                    this.RaisePropertyChanged("EntityState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal ImagesWcfServiceClient.ImagesWcfServiceReference.EntityType EntityType {
            get {
                return this.EntityTypeField;
            }
            set {
                if ((this.EntityTypeField.Equals(value) != true)) {
                    this.EntityTypeField = value;
                    this.RaisePropertyChanged("EntityType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityState", Namespace="http://schemas.datacontract.org/2004/07/ImagesWcfService")]
    internal enum EntityState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Added = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Modified = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityType", Namespace="http://schemas.datacontract.org/2004/07/ImagesWcfService")]
    internal enum EntityType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Image = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Tag = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ImagesWcfServiceReference.IImagesService", CallbackContract=typeof(ImagesWcfServiceClient.ImagesWcfServiceReference.IImagesServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    internal interface IImagesService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IImagesService/Subscribe")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IImagesService/Subscribe")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IImagesService/GetNextThumbnails", ReplyAction="http://tempuri.org/IImagesService/GetNextThumbnailsResponse")]
        ImagesWcfServiceClient.ImagesWcfServiceReference.Image[] GetNextThumbnails(int numberOfThumbnails, int widthOfThumbnail, bool resetToBeginning);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IImagesService/GetNextThumbnails", ReplyAction="http://tempuri.org/IImagesService/GetNextThumbnailsResponse")]
        System.Threading.Tasks.Task<ImagesWcfServiceClient.ImagesWcfServiceReference.Image[]> GetNextThumbnailsAsync(int numberOfThumbnails, int widthOfThumbnail, bool resetToBeginning);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IImagesService/GetNextThumbnailsWithSuchTags", ReplyAction="http://tempuri.org/IImagesService/GetNextThumbnailsWithSuchTagsResponse")]
        ImagesWcfServiceClient.ImagesWcfServiceReference.Image[] GetNextThumbnailsWithSuchTags(int numberOfThumbnails, int widthOfThumbnail, ImagesWcfServiceClient.ImagesWcfServiceReference.Tag[] tags, bool resetToBeginning);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IImagesService/GetNextThumbnailsWithSuchTags", ReplyAction="http://tempuri.org/IImagesService/GetNextThumbnailsWithSuchTagsResponse")]
        System.Threading.Tasks.Task<ImagesWcfServiceClient.ImagesWcfServiceReference.Image[]> GetNextThumbnailsWithSuchTagsAsync(int numberOfThumbnails, int widthOfThumbnail, ImagesWcfServiceClient.ImagesWcfServiceReference.Tag[] tags, bool resetToBeginning);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IImagesService/GetThumbnail", ReplyAction="http://tempuri.org/IImagesService/GetThumbnailResponse")]
        ImagesWcfServiceClient.ImagesWcfServiceReference.Image GetThumbnail(int widthOfThumbnail, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IImagesService/GetThumbnail", ReplyAction="http://tempuri.org/IImagesService/GetThumbnailResponse")]
        System.Threading.Tasks.Task<ImagesWcfServiceClient.ImagesWcfServiceReference.Image> GetThumbnailAsync(int widthOfThumbnail, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IImagesService/GetFullSizeImage", ReplyAction="http://tempuri.org/IImagesService/GetFullSizeImageResponse")]
        ImagesWcfServiceClient.ImagesWcfServiceReference.Image GetFullSizeImage(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IImagesService/GetFullSizeImage", ReplyAction="http://tempuri.org/IImagesService/GetFullSizeImageResponse")]
        System.Threading.Tasks.Task<ImagesWcfServiceClient.ImagesWcfServiceReference.Image> GetFullSizeImageAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IImagesService/GetAllTags", ReplyAction="http://tempuri.org/IImagesService/GetAllTagsResponse")]
        ImagesWcfServiceClient.ImagesWcfServiceReference.Tag[] GetAllTags();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IImagesService/GetAllTags", ReplyAction="http://tempuri.org/IImagesService/GetAllTagsResponse")]
        System.Threading.Tasks.Task<ImagesWcfServiceClient.ImagesWcfServiceReference.Tag[]> GetAllTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IImagesService/GetTag", ReplyAction="http://tempuri.org/IImagesService/GetTagResponse")]
        ImagesWcfServiceClient.ImagesWcfServiceReference.Tag GetTag(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IImagesService/GetTag", ReplyAction="http://tempuri.org/IImagesService/GetTagResponse")]
        System.Threading.Tasks.Task<ImagesWcfServiceClient.ImagesWcfServiceReference.Tag> GetTagAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/AddImage")]
        void AddImage(ImagesWcfServiceClient.ImagesWcfServiceReference.Image image);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/AddImage")]
        System.Threading.Tasks.Task AddImageAsync(ImagesWcfServiceClient.ImagesWcfServiceReference.Image image);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/UpdateImage")]
        void UpdateImage(ImagesWcfServiceClient.ImagesWcfServiceReference.Image image);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/UpdateImage")]
        System.Threading.Tasks.Task UpdateImageAsync(ImagesWcfServiceClient.ImagesWcfServiceReference.Image image);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/DeleteImage")]
        void DeleteImage(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/DeleteImage")]
        System.Threading.Tasks.Task DeleteImageAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/AddTag")]
        void AddTag(ImagesWcfServiceClient.ImagesWcfServiceReference.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/AddTag")]
        System.Threading.Tasks.Task AddTagAsync(ImagesWcfServiceClient.ImagesWcfServiceReference.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/UpdateTag")]
        void UpdateTag(ImagesWcfServiceClient.ImagesWcfServiceReference.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/UpdateTag")]
        System.Threading.Tasks.Task UpdateTagAsync(ImagesWcfServiceClient.ImagesWcfServiceReference.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/DeleteTag")]
        void DeleteTag(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/DeleteTag")]
        System.Threading.Tasks.Task DeleteTagAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/Unsubscribe")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IImagesService/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface IImagesServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IImagesService/NotifyAboutDatabaseUpdate")]
        void NotifyAboutDatabaseUpdate(ImagesWcfServiceClient.ImagesWcfServiceReference.EntityChangeInfo entityChangeInfo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface IImagesServiceChannel : ImagesWcfServiceClient.ImagesWcfServiceReference.IImagesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class ImagesServiceClient : System.ServiceModel.DuplexClientBase<ImagesWcfServiceClient.ImagesWcfServiceReference.IImagesService>, ImagesWcfServiceClient.ImagesWcfServiceReference.IImagesService {
        
        public ImagesServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ImagesServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ImagesServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ImagesServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ImagesServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public ImagesWcfServiceClient.ImagesWcfServiceReference.Image[] GetNextThumbnails(int numberOfThumbnails, int widthOfThumbnail, bool resetToBeginning) {
            return base.Channel.GetNextThumbnails(numberOfThumbnails, widthOfThumbnail, resetToBeginning);
        }
        
        public System.Threading.Tasks.Task<ImagesWcfServiceClient.ImagesWcfServiceReference.Image[]> GetNextThumbnailsAsync(int numberOfThumbnails, int widthOfThumbnail, bool resetToBeginning) {
            return base.Channel.GetNextThumbnailsAsync(numberOfThumbnails, widthOfThumbnail, resetToBeginning);
        }
        
        public ImagesWcfServiceClient.ImagesWcfServiceReference.Image[] GetNextThumbnailsWithSuchTags(int numberOfThumbnails, int widthOfThumbnail, ImagesWcfServiceClient.ImagesWcfServiceReference.Tag[] tags, bool resetToBeginning) {
            return base.Channel.GetNextThumbnailsWithSuchTags(numberOfThumbnails, widthOfThumbnail, tags, resetToBeginning);
        }
        
        public System.Threading.Tasks.Task<ImagesWcfServiceClient.ImagesWcfServiceReference.Image[]> GetNextThumbnailsWithSuchTagsAsync(int numberOfThumbnails, int widthOfThumbnail, ImagesWcfServiceClient.ImagesWcfServiceReference.Tag[] tags, bool resetToBeginning) {
            return base.Channel.GetNextThumbnailsWithSuchTagsAsync(numberOfThumbnails, widthOfThumbnail, tags, resetToBeginning);
        }
        
        public ImagesWcfServiceClient.ImagesWcfServiceReference.Image GetThumbnail(int widthOfThumbnail, int id) {
            return base.Channel.GetThumbnail(widthOfThumbnail, id);
        }
        
        public System.Threading.Tasks.Task<ImagesWcfServiceClient.ImagesWcfServiceReference.Image> GetThumbnailAsync(int widthOfThumbnail, int id) {
            return base.Channel.GetThumbnailAsync(widthOfThumbnail, id);
        }
        
        public ImagesWcfServiceClient.ImagesWcfServiceReference.Image GetFullSizeImage(int id) {
            return base.Channel.GetFullSizeImage(id);
        }
        
        public System.Threading.Tasks.Task<ImagesWcfServiceClient.ImagesWcfServiceReference.Image> GetFullSizeImageAsync(int id) {
            return base.Channel.GetFullSizeImageAsync(id);
        }
        
        public ImagesWcfServiceClient.ImagesWcfServiceReference.Tag[] GetAllTags() {
            return base.Channel.GetAllTags();
        }
        
        public System.Threading.Tasks.Task<ImagesWcfServiceClient.ImagesWcfServiceReference.Tag[]> GetAllTagsAsync() {
            return base.Channel.GetAllTagsAsync();
        }
        
        public ImagesWcfServiceClient.ImagesWcfServiceReference.Tag GetTag(int id) {
            return base.Channel.GetTag(id);
        }
        
        public System.Threading.Tasks.Task<ImagesWcfServiceClient.ImagesWcfServiceReference.Tag> GetTagAsync(int id) {
            return base.Channel.GetTagAsync(id);
        }
        
        public void AddImage(ImagesWcfServiceClient.ImagesWcfServiceReference.Image image) {
            base.Channel.AddImage(image);
        }
        
        public System.Threading.Tasks.Task AddImageAsync(ImagesWcfServiceClient.ImagesWcfServiceReference.Image image) {
            return base.Channel.AddImageAsync(image);
        }
        
        public void UpdateImage(ImagesWcfServiceClient.ImagesWcfServiceReference.Image image) {
            base.Channel.UpdateImage(image);
        }
        
        public System.Threading.Tasks.Task UpdateImageAsync(ImagesWcfServiceClient.ImagesWcfServiceReference.Image image) {
            return base.Channel.UpdateImageAsync(image);
        }
        
        public void DeleteImage(int id) {
            base.Channel.DeleteImage(id);
        }
        
        public System.Threading.Tasks.Task DeleteImageAsync(int id) {
            return base.Channel.DeleteImageAsync(id);
        }
        
        public void AddTag(ImagesWcfServiceClient.ImagesWcfServiceReference.Tag tag) {
            base.Channel.AddTag(tag);
        }
        
        public System.Threading.Tasks.Task AddTagAsync(ImagesWcfServiceClient.ImagesWcfServiceReference.Tag tag) {
            return base.Channel.AddTagAsync(tag);
        }
        
        public void UpdateTag(ImagesWcfServiceClient.ImagesWcfServiceReference.Tag tag) {
            base.Channel.UpdateTag(tag);
        }
        
        public System.Threading.Tasks.Task UpdateTagAsync(ImagesWcfServiceClient.ImagesWcfServiceReference.Tag tag) {
            return base.Channel.UpdateTagAsync(tag);
        }
        
        public void DeleteTag(int id) {
            base.Channel.DeleteTag(id);
        }
        
        public System.Threading.Tasks.Task DeleteTagAsync(int id) {
            return base.Channel.DeleteTagAsync(id);
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
    }
}
